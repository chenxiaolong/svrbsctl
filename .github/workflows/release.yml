---
on:
  push:
    # Uncomment to test against a branch
    #branches:
    #  - ci
    tags:
      - 'v*'
jobs:
  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              version=${GITHUB_REF#refs/tags/v}
          else
              version=0.0.0-${GITHUB_REF#refs/heads/}
          fi
          echo "::set-output name=version::${version}"

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Version ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and upload assets
    needs: create_release
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install winmd files
        run: |
          cargo install cargo-winrt
          cargo winrt install

      - name: Install clippy
        run: rustup component add clippy

      - name: Run clippy checks in release mode
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo clippy --workspace --release -- -D warnings

      - name: Build in release mode
        run: cargo build --release --verbose

      - name: Build archive
        shell: bash
        run: |
          base_name=svrbsctl-${{ needs.create_release.outputs.version }}
          mkdir "${base_name}"
          cp {README.md,LICENSE,target/release/svrbsctl.exe} "${base_name}/"
          7z a "${base_name}.zip" "${base_name}"
          echo "ASSET=${base_name}.zip" >> "${GITHUB_ENV}"

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ${{ env.ASSET }}
          asset_path: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
